@page "/"
@attribute [Authorize]
@inject NavigationManager NavigationManager;


<PageTitle> Recifever Blazor </PageTitle>

<h3> Explore your favorite meals! </h3>

@if (Recipes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="d-flex flex-wrap">
      @foreach(var recipe in Recipes)
        {
            <div class="order-3 p-2 bd-highlight">
              <div class="card border-primary" style="width: 18rem;">
                <img class="card-img-top" src="@recipe.Photos?.First()" alt="Card image cap">
                <div class="card-body">
                    <h5 class="card-title"> @recipe.Title </h5>
                    <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
                    <a href="recipe/@recipe.Id" class="btn btn-outline-primary"> Details </a>
                </div>
             </div>
            </div>
        } 
    </div>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; } = null!;

    public List<Recipe> Recipes { get; set; } = null!;
    [Inject]
    public IRecipeService RecipeService { get; set; } = null!;
    [Inject]
    public IJSRuntime JSRuntime { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        //AuthenticationState authState = await authenticationState;
        //var user = authState.User;
        Recipes = (await RecipeService.GetAllRecipesAsync()).ToList();
        var token = await GetToken();
        var handler = new JwtSecurityTokenHandler();
        var jwtSecurityToken = handler.ReadJwtToken(token);
        var name = jwtSecurityToken.Claims.First(x => x.Type == "userName").Value;
        var userId = jwtSecurityToken.Claims.First(x => x.Type == "userId").Value;
        Console.WriteLine(name);
        Console.WriteLine(userId);
    }

    private async Task<string> GetToken()
    {
        return await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
    } 
}