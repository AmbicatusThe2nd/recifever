@page "/login"
@layout FormLayout
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@using recifever_blz.Models
@using recifever_blz.Services.AuthServices;
@using System.Net;


<EditForm Model="@LoginForm" OnValidSubmit="@LoginSubmit">
    <div class="row">
        <div class="col text-center">
            <svg xmlns="http://www.w3.org/2000/svg" width="250" height="250" fill="currentColor" class="m-3 bi bi-yin-yang" viewBox="0 0 16 16">
                <path d="M9.167 4.5a1.167 1.167 0 1 1-2.334 0 1.167 1.167 0 0 1 2.334 0Z"/>
                <path d="M8 0a8 8 0 1 0 0 16A8 8 0 0 0 8 0ZM1 8a7 7 0 0 1 7-7 3.5 3.5 0 1 1 0 7 3.5 3.5 0 1 0 0 7 7 7 0 0 1-7-7Zm7 4.667a1.167 1.167 0 1 1 0-2.334 1.167 1.167 0 0 1 0 2.334Z"/>
            </svg>
        </div>
    </div>
    <div class="row">
        <div class="col text-center">
            <h3>Login</h3>
        </div>
    </div>
    <DataAnnotationsValidator/>
    <div class="row">
        <label class="form-label">
            Email:
         </label>
         <div class="col text-center">        
            <div class="form-group">
                <InputText class="form-control" @bind-Value="LoginForm.email"/>
             </div>
         </div>  
         <ValidationMessage class="form-check-label" For=@(() => LoginForm.email) />
    </div>
        <div class="row">
            <label class="form-label">
                Password:
            </label>
            <div class="col text-center">  
                <div class="form-group">
                    <InputText class="form-control" type="password" @bind-Value="LoginForm.password"/>
                </div>
            </div>
            <ValidationMessage class="form-check-label" For=@(() => LoginForm.password) />
        </div>
            <div class="row">
                <div class="col text-center">
                    <button class="mt-1 btn btn-outline-primary" type="submit"> Login </button>
                    <NavLink class="mt-1 ml-0 btn btn-outline-dark" href="register"> Register </NavLink>
                </div>
            </div>
            <h1> @WrongData </h1>
            @if(WrongData == 1)
            {
                <div class="row">
                    <div class="col text-center">
                        <div class="alert alert-primary mt-3"> Either you entered the wrong email or the wrong password </div>
                    </div>
                </div>
            }
</EditForm>

@code {
    [Inject]
    public IUserService UserService { get; set; } = null!;

    private LoginModel LoginForm = new LoginModel();
    private int WrongData = 0; 

    private async void LoginSubmit()
    {
        WrongData = 0;
        HttpResponseMessage response = (await UserService.AuthWebToken(LoginForm));
        if (response.StatusCode == HttpStatusCode.OK)
        {
            AuthWebToken jsonWebToken = await response.Content.ReadAsAsync<AuthWebToken>();
            await JsRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", jsonWebToken.Token);
            NavigationManager.NavigateTo("/");
        }
        else
        {
            Console.WriteLine("This has happened");
            WrongData ++;
        }
    }
}
