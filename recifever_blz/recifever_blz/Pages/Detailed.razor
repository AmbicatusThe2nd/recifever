@page "/recipe/{recipeId}"
@inject NavigationManager NavManager
@using recifever_blz.Services.RecipeServices
@using recifever_blz.Models;

<PageTitle> Recifever Blazor </PageTitle>

@if(CurrentRecipe == null)
{
    <div class="d-flex justify-content-center">
      <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
    </div>
}
else
{
    <h1> @CurrentRecipe.Title </h1>
    @*<div id="carouselExampleControls" class="carousel slide" data-bs-ride="carousel">
      <div class="carousel-inner">
        <div class="carousel-item active">
          <img src="" class="d-block w-100">
        </div>
        <div class="carousel-item">
          <img src="" class="d-block w-100">
        </div>
        <div class="carousel-item">
          <img src="" class="d-block w-100">
        </div>
      </div>
      <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleControls" data-bs-slide="prev">
        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Previous</span>
      </button>
      <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleControls" data-bs-slide="next">
        <span class="carousel-control-next-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Next</span>
      </button>
    </div>*@
}

@code {
    [Parameter]
    public string? recipeId { get; set; } = null!;
    [Inject]
    public IRecipeService? RecipeService { get; set; } = null!;
    public Recipe? CurrentRecipe { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            CurrentRecipe = (await RecipeService.GetRecipeAsync(recipeId));
            Console.WriteLine(CurrentRecipe.Title);
        }
        catch
        {
            NavManager.NavigateTo("/");
        }
    }
}
