@page "/recipe/{recipeId}"
@inject NavigationManager NavManager
@using recifever_blz.Services.RecipeServices
@using recifever_blz.Services.AuthServices
@using recifever_blz.Models;

<PageTitle> Recifever Blazor </PageTitle>

@if(CurrentRecipe == null)
{
    <div class="d-flex justify-content-center">
      <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
    </div>
}
else
{
    <div class="container-fluid text-center">
        <h1> @CurrentRecipe.Title </h1>
    </div>
    <div class="container-sm container-fluid text-center">
        <div id="carouselexamplecontrols" class="carousel slide" data-bs-ride="carousel">
          <div class="carousel-inner" style="max-width:100%; max-height:300px !important;">
                @foreach(string photo in CurrentRecipe.Photos)
                {
                    <div class="col-sm-4 carousel-item active">
                        <img src="@photo" class="img-fluid">
                    </div>
                }
            </div>
          <button class="carousel-control-prev" type="button" data-bs-target="#carouselexamplecontrols" data-bs-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">previous</span>
          </button>
          <button class="carousel-control-next" type="button" data-bs-target="#carouselexamplecontrols" data-bs-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">next</span>
          </button>
        </div>
        <div class="container-fluid">
            <nav class="navbar navbar-dark bg-custom">
                <span class="ms-3 navbar-brand"> @RecipeCreator.firstName @RecipeCreator.lastName </span>
                <div class="my-2 my-lg-0">
                    <span class="label label-default navbar-brand"> @CurrentRecipe.PreperationTime min </span>
                    <span class="label label-default navbar-brand"> @CurrentRecipe.CookingTime min </span>
                    <span class="label label-default navbar-brand"> @CurrentRecipe.Calories cal </span>
                    <span class="label label-default navbar-brand"> @CurrentRecipe.Difficulty/5 </span>
                    <span class="label label-default navbar-brand"> @CurrentRecipe.DailyMeal </span>
                </div> 
            </nav>
        </div>
        <div class="container-fluid mt-5">
           <table class="table table-lg">
              <thead>
                <tr class="table-dark">
                  <th scope="col">#</th>
                  <th scope="col">Ingredient</th>
                  <th scope="col">Ammount</th>
                  <th scope="col">Measurement</th>
                </tr>
              </thead>
              <tbody>
                    @for(int i=0; i < CurrentRecipe.Ingredients.Length; i++)
                    {
                        <tr>
                            <th class="row"> @(i+1) </th>
                            <td> @CurrentRecipe.Ingredients[i].Ingredient </td>
                            <td> @CurrentRecipe.Ingredients[i].Amount </td>
                            <td> @CurrentRecipe.Ingredients[i].Measurement </td>
                        </tr>
                    }
              </tbody>
            </table>
        </div>
    </div>
    
}

@code {
    [Parameter]
    public string? recipeId { get; set; } = null!;

    [Inject]
    public IRecipeService? RecipeService { get; set; } = null!;

    [Inject]
    public IUserService? UserService { get; set; } = null!;

    public Recipe? CurrentRecipe { get; set; } = null!;
    public User? RecipeCreator { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            CurrentRecipe = (await RecipeService.GetRecipeAsync(recipeId));
            RecipeCreator = (await UserService.GetUserById(CurrentRecipe.UserId));
            Console.WriteLine(CurrentRecipe.Title);
        }
        catch
        {
            NavManager.NavigateTo("/");
        }
    }
}
